/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ui.forms;

import controller.Controller;
import domain.Movie;
import domain.MovieTheater;
import domain.Projection;
import domain.User;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.LocalTime;
import java.util.Date;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.plaf.OptionPaneUI;

/**
 *
 * @author Milica i Nikola
 */
public class FProjection extends javax.swing.JDialog {

    /**
     * Creates new form FProjection
     */
    public FProjection(java.awt.Frame parent, boolean modal, FormMode formmode) {
        super(parent, modal);
        initComponents();
        prepareView(formmode);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jcmbboxAllMovies = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jcmbboxAllMovieTheaters = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        jlblProjectionID = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jtxtScreen = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        cbDay = new javax.swing.JComboBox<>();
        cbMonth = new javax.swing.JComboBox<>();
        cbYear = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();
        jcmbboxHour = new javax.swing.JComboBox<>();
        jcmbboxMinutes = new javax.swing.JComboBox<>();
        jbtnSave = new javax.swing.JButton();
        jbtnAddAnother = new javax.swing.JButton();
        jbtnSeeAll = new javax.swing.JButton();
        jbtnCancel = new javax.swing.JButton();
        jbtnChange = new javax.swing.JButton();
        jbtnUpdate = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setText("Projection of:");

        jLabel2.setText("Choose theater:");

        jLabel3.setText("ProjectionID:");

        jLabel4.setText("Screen:");

        jLabel5.setText("Date:");

        jLabel6.setText("Time:");

        jbtnSave.setText("Save");
        jbtnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnSaveActionPerformed(evt);
            }
        });

        jbtnAddAnother.setText("Add Another");
        jbtnAddAnother.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnAddAnotherActionPerformed(evt);
            }
        });

        jbtnSeeAll.setText("See All");
        jbtnSeeAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnSeeAllActionPerformed(evt);
            }
        });

        jbtnCancel.setText("Cancel");
        jbtnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnCancelActionPerformed(evt);
            }
        });

        jbtnChange.setText("Change");
        jbtnChange.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnChangeActionPerformed(evt);
            }
        });

        jbtnUpdate.setText("Update");
        jbtnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnUpdateActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel5)
                                    .addComponent(jLabel6))
                                .addGap(27, 27, 27)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jcmbboxAllMovies, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jcmbboxAllMovieTheaters, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jlblProjectionID, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jtxtScreen, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jcmbboxHour, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jcmbboxMinutes, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(124, 124, 124))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addComponent(cbDay, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(cbMonth, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(cbYear, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jbtnCancel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jbtnSeeAll)
                        .addGap(18, 18, 18)
                        .addComponent(jbtnChange)
                        .addGap(14, 14, 14)
                        .addComponent(jbtnUpdate)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jbtnAddAnother)
                        .addGap(18, 18, 18)
                        .addComponent(jbtnSave)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jcmbboxAllMovies, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jcmbboxAllMovieTheaters, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jlblProjectionID))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jtxtScreen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(cbMonth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(cbDay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(cbYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel6)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jcmbboxMinutes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jcmbboxHour, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 53, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbtnSave)
                    .addComponent(jbtnAddAnother)
                    .addComponent(jbtnSeeAll)
                    .addComponent(jbtnCancel)
                    .addComponent(jbtnChange)
                    .addComponent(jbtnUpdate))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jbtnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnSaveActionPerformed
        LocalDate projectionDate;
        LocalTime projectionTime;
        if (cbDay.getSelectedIndex() == -1 || cbMonth.getSelectedIndex() == -1 || cbYear.getSelectedIndex() == -1) {
            JOptionPane.showMessageDialog(null, "Please select all informations about date of the projection!");

        } else if (jcmbboxHour.getSelectedIndex() == -1 || jcmbboxMinutes.getSelectedIndex() == -1) {
            JOptionPane.showMessageDialog(null, "Please select all informations about time of the projection!");

        } else {

            projectionTime = getSelectedTime();
            projectionDate = getSelectedDate();

            int selectedIndexMovie = jcmbboxAllMovies.getSelectedIndex();
            int selectedIndexTheater = jcmbboxAllMovieTheaters.getSelectedIndex();
            if (selectedIndexMovie == -1 || selectedIndexTheater == -1) {
                JOptionPane.showMessageDialog(null, "Please select all informations about projection!");
            } else {
                Projection projection = new Projection((Movie) jcmbboxAllMovies.getSelectedItem(), null, projectionDate, projectionTime, jtxtScreen.getText(), (User) Controller.getInstance().getMap().get("current_employee"), (MovieTheater) jcmbboxAllMovieTheaters.getSelectedItem());
                projection = Controller.getInstance().saveProjection(projection);
                Controller.getInstance().getMap().put("current_projection", projection);

                prepareView(FormMode.FORM_VIEW);
            }
        }
    }//GEN-LAST:event_jbtnSaveActionPerformed

    private void jbtnSeeAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnSeeAllActionPerformed
        FProjectionSearch d = new FProjectionSearch(null, false);
        d.setVisible(true);
        dispose();
    }//GEN-LAST:event_jbtnSeeAllActionPerformed

    private void jbtnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnCancelActionPerformed
        dispose();
    }//GEN-LAST:event_jbtnCancelActionPerformed

    private void jbtnAddAnotherActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnAddAnotherActionPerformed
//        jtxtScreen.setText("");
//        jlblProjectionID.setText("");
//        jcmbboxAllMovieTheaters.setSelectedIndex(-1);
//        jcmbboxAllMovies.setSelectedIndex(-1);
//
//        cbDay.setSelectedIndex(-1);
//        cbMonth.setSelectedIndex(-1);
//        cbYear.setSelectedIndex(-1);
//
//        jcmbboxHour.setSelectedIndex(-1);
//        jcmbboxMinutes.setSelectedIndex(-1);

        prepareView(FormMode.FORM_ADD);
    }//GEN-LAST:event_jbtnAddAnotherActionPerformed

    private void jbtnChangeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnChangeActionPerformed
        prepareView(FormMode.FORM_UPDATE);
    }//GEN-LAST:event_jbtnChangeActionPerformed

    private void jbtnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnUpdateActionPerformed
        LocalDate projectionDate;
        LocalTime projectionTime;
        if (cbDay.getSelectedIndex() == -1 || cbMonth.getSelectedIndex() == -1 || cbYear.getSelectedIndex() == -1) {
            JOptionPane.showMessageDialog(null, "Please select all informations about date of the projection!");

        } else if (jcmbboxHour.getSelectedIndex() == -1 || jcmbboxMinutes.getSelectedIndex() == -1) {
            JOptionPane.showMessageDialog(null, "Please select all informations about time of the projection!");

        } else {

            projectionTime = getSelectedTime();
            projectionDate = getSelectedDate();

            int selectedIndexMovie = jcmbboxAllMovies.getSelectedIndex();
            int selectedIndexTheater = jcmbboxAllMovieTheaters.getSelectedIndex();
            if (selectedIndexMovie == -1 || selectedIndexTheater == -1) {
                JOptionPane.showMessageDialog(null, "Please select all informations about projection!");
            } else {
                Projection projection = (Projection) Controller.getInstance().getMap().get("current_projection");
                projection.setDate(projectionDate);
                projection.setMovie((Movie) jcmbboxAllMovies.getSelectedItem());
                projection.setScreen(jtxtScreen.getText());
                projection.setTheater((MovieTheater) jcmbboxAllMovieTheaters.getSelectedItem());
                projection.setTime(projectionTime);

                projection = Controller.getInstance().updateProjection(projection);
                Controller.getInstance().getMap().put("current_projection", projection);

                prepareView(FormMode.FORM_VIEW);
            }
        }
    }//GEN-LAST:event_jbtnUpdateActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FProjection.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FProjection.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FProjection.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FProjection.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                FProjection dialog = new FProjection(new javax.swing.JFrame(), true, FormMode.FORM_ADD);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> cbDay;
    private javax.swing.JComboBox<String> cbMonth;
    private javax.swing.JComboBox<String> cbYear;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JButton jbtnAddAnother;
    private javax.swing.JButton jbtnCancel;
    private javax.swing.JButton jbtnChange;
    private javax.swing.JButton jbtnSave;
    private javax.swing.JButton jbtnSeeAll;
    private javax.swing.JButton jbtnUpdate;
    private javax.swing.JComboBox<MovieTheater> jcmbboxAllMovieTheaters;
    private javax.swing.JComboBox<Movie> jcmbboxAllMovies;
    private javax.swing.JComboBox<String> jcmbboxHour;
    private javax.swing.JComboBox<String> jcmbboxMinutes;
    private javax.swing.JLabel jlblProjectionID;
    private javax.swing.JTextField jtxtScreen;
    // End of variables declaration//GEN-END:variables

    private void prepareView(FormMode formmode) {
        setLocationRelativeTo(null);
        if (formmode.equals(FormMode.FORM_UPDATE)) {
            jbtnCancel.setVisible(true);
            jbtnAddAnother.setVisible(false);
            jbtnSeeAll.setVisible(false);
            jbtnSave.setVisible(false);
            jbtnChange.setVisible(false);
            jbtnUpdate.setVisible(true);

            jtxtScreen.setEditable(true);

            jtxtScreen.setEditable(true);

            jcmbboxAllMovieTheaters.setEnabled(true);
            jcmbboxAllMovies.setEnabled(true);
            jcmbboxMinutes.setEnabled(true);
            cbDay.setEnabled(true);
            cbMonth.setEnabled(true);
            cbYear.setEnabled(true);
            jcmbboxHour.setEnabled(true);
            jcmbboxMinutes.setEnabled(true);

        }

        if (formmode.equals(FormMode.FORM_ADD)) {
            jtxtScreen.setText("");
            jlblProjectionID.setText("");

            fillDate();
            fillTime();

            cbDay.setSelectedIndex(-1);
            cbMonth.setSelectedIndex(-1);
            cbYear.setSelectedIndex(-1);

            jcmbboxHour.setSelectedIndex(-1);
            jcmbboxMinutes.setSelectedIndex(-1);

            jbtnSave.setVisible(true);
            jbtnAddAnother.setVisible(false);
            jbtnSeeAll.setVisible(true);
            jbtnChange.setVisible(false);
            jbtnUpdate.setVisible(false);
            jbtnCancel.setVisible(true);

            jcmbboxAllMovieTheaters.removeAllItems();
            jcmbboxAllMovies.removeAllItems();
            for (Movie movie : (List<Movie>) Controller.getInstance().getAllMovies()) {
                jcmbboxAllMovies.addItem(movie);
            }
            for (MovieTheater movieTheater : (List<MovieTheater>) Controller.getInstance().getAllMovieTheaters()) {
                jcmbboxAllMovieTheaters.addItem(movieTheater);
            }

            jcmbboxAllMovieTheaters.setSelectedIndex(-1);
            jcmbboxAllMovies.setSelectedIndex(-1);
            jtxtScreen.setEditable(true);

            jtxtScreen.setEditable(true);

            jcmbboxAllMovieTheaters.setEnabled(true);
            jcmbboxAllMovies.setEnabled(true);
            jcmbboxMinutes.setEnabled(true);
            cbDay.setEnabled(true);
            cbMonth.setEnabled(true);
            cbYear.setEnabled(true);
            jcmbboxHour.setEnabled(true);
            jcmbboxMinutes.setEnabled(true);
        }
        if (formmode.equals(FormMode.FORM_VIEW)) {
            fillDate();
            fillTime();

            jcmbboxAllMovieTheaters.removeAllItems();
            jcmbboxAllMovies.removeAllItems();
            for (Movie movie : (List<Movie>) Controller.getInstance().getAllMovies()) {
                jcmbboxAllMovies.addItem(movie);
            }
            for (MovieTheater movieTheater : (List<MovieTheater>) Controller.getInstance().getAllMovieTheaters()) {
                jcmbboxAllMovieTheaters.addItem(movieTheater);
            }
            fillProjection((Projection) Controller.getInstance().getMap().get("current_projection"));
            jbtnSave.setVisible(false);
            jbtnAddAnother.setVisible(true);
            jbtnSeeAll.setVisible(true);
            jbtnChange.setVisible(true);
            jbtnUpdate.setVisible(false);

            jtxtScreen.setEditable(false);
            jcmbboxAllMovieTheaters.setEnabled(false);
            jcmbboxAllMovies.setEnabled(false);
            jcmbboxHour.setEnabled(false);
            jcmbboxMinutes.setEnabled(false);
            cbDay.setEnabled(false);
            cbMonth.setEnabled(false);
            cbYear.setEnabled(false);

        }

    }

    private void fillDate() throws NumberFormatException {
        cbDay.removeAllItems();
        cbMonth.removeAllItems();
        cbYear.removeAllItems();
        for (int i = 1; i < 32; i++) {
            if (i < 10) {
                cbDay.addItem("0" + i);
            } else {
                cbDay.addItem(i + "");
            }
        }
        for (int i = 1; i < 13; i++) {

            if (i < 10) {
                cbMonth.addItem("0" + i);
            } else {
                cbMonth.addItem(i + "");
            }
        }
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy");
        Date date = new Date();
        int year = Integer.parseInt(sdf.format(date));
        int year1 = year + 1;
        for (int i = year; i <= year1; i++) {
            cbYear.addItem(i + "");
        }
    }

    private void fillTime() {
        jcmbboxHour.removeAllItems();
        jcmbboxMinutes.removeAllItems();

        for (int i = 0; i < 24; i++) {
            if (i < 10) {
                jcmbboxHour.addItem("0" + i);

            } else {
                jcmbboxHour.addItem(i + "");
            }
        }
        for (int i = 0; i < 60; i++) {
            if (i < 10) {
                jcmbboxMinutes.addItem("0" + i);
            } else {
                jcmbboxMinutes.addItem(i + "");
            }
        }
    }

    private LocalDate getSelectedDate() {
        String day = (String) cbDay.getSelectedItem();
        String month = (String) cbMonth.getSelectedItem();
        String year = (String) cbYear.getSelectedItem();
        String date = year + "-" + month + "-" + day;

        return LocalDate.parse(date);

    }

    private LocalTime getSelectedTime() {
        String hour = (String) jcmbboxHour.getSelectedItem();
        String minutes = (String) jcmbboxMinutes.getSelectedItem();

        String time = hour + ":" + minutes;
        return LocalTime.parse(time);
    }

    private void fillProjection(Projection projection) {
        jcmbboxAllMovieTheaters.setSelectedItem(projection.getTheater());
        jcmbboxAllMovies.setSelectedItem(projection.getMovie());
        jtxtScreen.setText(projection.getScreen());
        jlblProjectionID.setText(projection.getProjectionID() + "");

        jcmbboxHour.setSelectedIndex(projection.getTime().getHour());
        jcmbboxMinutes.setSelectedIndex(projection.getTime().getMinute());

        cbDay.setSelectedIndex(projection.getDate().getDayOfMonth() - 1);
        cbMonth.setSelectedIndex(projection.getDate().getMonth().getValue() - 1);
        cbYear.setSelectedItem(projection.getDate().getYear() + "");
    }
}
